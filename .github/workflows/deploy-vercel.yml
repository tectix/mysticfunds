name: Deploy Frontend to Vercel

# Trigger deployment on push to dev branch (frontend changes)
on:
  push:
    branches: [ dev ]
    paths: 
      - 'web/**'
      - 'vercel.json'
      - '.vercelignore'

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Vercel CLI
      run: npm install -g vercel
      timeout-minutes: 2

    - name: Deploy to Vercel
      run: |
        echo "Deploying to Vercel..."
        VERCEL_URL=$(vercel --prod --token=$VERCEL_TOKEN --yes)
        echo "::notice title=Vercel Deployment::Deployed to $VERCEL_URL"
        echo "VERCEL_URL=$VERCEL_URL" >> $GITHUB_ENV
        echo "Frontend deployed successfully!"
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      timeout-minutes: 5

    - name: Verify deployment
      run: |
        echo "Vercel deployment completed!"
        echo "Live at: $VERCEL_URL"
      timeout-minutes: 1
      
    - name: Create GitHub deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'vercel-production',
            auto_merge: false,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: process.env.VERCEL_URL,
            description: 'Vercel deployment successful'
          });