name: Deploy to Railway

# Trigger deployment on push to dev branch only
on:
  push:
    branches: [ dev ]

permissions:
  contents: read
  deployments: write

env:
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build services (test build)
      run: |
        echo "Testing build process..."
        for service in auth-service wizard-service mana-service api-gateway; do
          if [ -f "cmd/$service/main.go" ]; then
            echo "Building $service..."
            go build -v ./cmd/$service/
          else
            echo "Skipping $service - no main.go found"
          fi
        done

    - name: Run unit tests (with timeout)
      run: |
        echo "Running available tests..."
        # Only run tests if test files exist
        if find . -name "*_test.go" -type f | head -1 | grep -q .; then
          timeout 300s go test -v -timeout=60s ./...
        else
          echo "No test files found, skipping tests"
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Railway CLI
      run: |
        npm install -g @railway/cli

    - name: Deploy to Railway
      run: |
        echo "Checking Railway token..."
        if [ -z "$RAILWAY_TOKEN" ]; then
          echo "::error title=Railway Token Missing::RAILWAY_TOKEN secret not set"
          exit 1
        fi
        
        echo "Starting Railway deployment..."
        railway up --detach
        
        echo "Getting deployment URL..."
        RAILWAY_URL=$(railway domain)
        echo "::notice title=Railway Deployment::Deployed to $RAILWAY_URL"
        echo "RAILWAY_URL=$RAILWAY_URL" >> $GITHUB_ENV
        
        echo "Deployment initiated successfully!"
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      timeout-minutes: 10

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 90

    - name: Verify deployment
      run: |
        echo "Checking Railway deployment status..."
        railway status || echo "Status check failed, but deployment may still be in progress"
        echo "ailway deployment completed!"
        echo "Live at: $RAILWAY_URL"
      timeout-minutes: 2
      
    - name: Create GitHub deployment
      uses: actions/github-script@v7
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'railway-production',
            auto_merge: false,
            required_contexts: []
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'success',
            environment_url: process.env.RAILWAY_URL,
            description: 'Railway deployment successful'
          });