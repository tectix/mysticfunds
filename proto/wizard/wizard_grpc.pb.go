// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/wizard/wizard.proto

package wizard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WizardService_CreateWizard_FullMethodName          = "/wizard.WizardService/CreateWizard"
	WizardService_GetWizard_FullMethodName             = "/wizard.WizardService/GetWizard"
	WizardService_UpdateWizard_FullMethodName          = "/wizard.WizardService/UpdateWizard"
	WizardService_ListWizards_FullMethodName           = "/wizard.WizardService/ListWizards"
	WizardService_DeleteWizard_FullMethodName          = "/wizard.WizardService/DeleteWizard"
	WizardService_JoinGuild_FullMethodName             = "/wizard.WizardService/JoinGuild"
	WizardService_LeaveGuild_FullMethodName            = "/wizard.WizardService/LeaveGuild"
	WizardService_CreateJob_FullMethodName             = "/wizard.WizardService/CreateJob"
	WizardService_GetJob_FullMethodName                = "/wizard.WizardService/GetJob"
	WizardService_ListJobs_FullMethodName              = "/wizard.WizardService/ListJobs"
	WizardService_UpdateJob_FullMethodName             = "/wizard.WizardService/UpdateJob"
	WizardService_DeleteJob_FullMethodName             = "/wizard.WizardService/DeleteJob"
	WizardService_AssignWizardToJob_FullMethodName     = "/wizard.WizardService/AssignWizardToJob"
	WizardService_GetJobAssignments_FullMethodName     = "/wizard.WizardService/GetJobAssignments"
	WizardService_CompleteJobAssignment_FullMethodName = "/wizard.WizardService/CompleteJobAssignment"
	WizardService_CancelJobAssignment_FullMethodName   = "/wizard.WizardService/CancelJobAssignment"
	WizardService_UpdateJobProgress_FullMethodName     = "/wizard.WizardService/UpdateJobProgress"
	WizardService_GetJobProgress_FullMethodName        = "/wizard.WizardService/GetJobProgress"
	WizardService_GetActivities_FullMethodName         = "/wizard.WizardService/GetActivities"
	WizardService_GetRealms_FullMethodName             = "/wizard.WizardService/GetRealms"
	WizardService_GetManaBalance_FullMethodName        = "/wizard.WizardService/GetManaBalance"
	WizardService_UpdateManaBalance_FullMethodName     = "/wizard.WizardService/UpdateManaBalance"
	WizardService_TransferMana_FullMethodName          = "/wizard.WizardService/TransferMana"
)

// WizardServiceClient is the client API for WizardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WizardServiceClient interface {
	CreateWizard(ctx context.Context, in *CreateWizardRequest, opts ...grpc.CallOption) (*Wizard, error)
	GetWizard(ctx context.Context, in *GetWizardRequest, opts ...grpc.CallOption) (*Wizard, error)
	UpdateWizard(ctx context.Context, in *UpdateWizardRequest, opts ...grpc.CallOption) (*Wizard, error)
	ListWizards(ctx context.Context, in *ListWizardsRequest, opts ...grpc.CallOption) (*ListWizardsResponse, error)
	DeleteWizard(ctx context.Context, in *DeleteWizardRequest, opts ...grpc.CallOption) (*DeleteWizardResponse, error)
	JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*Wizard, error)
	LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*Wizard, error)
	// Jobs
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Job, error)
	DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error)
	// Job Assignments
	AssignWizardToJob(ctx context.Context, in *AssignWizardToJobRequest, opts ...grpc.CallOption) (*JobAssignment, error)
	GetJobAssignments(ctx context.Context, in *GetJobAssignmentsRequest, opts ...grpc.CallOption) (*GetJobAssignmentsResponse, error)
	CompleteJobAssignment(ctx context.Context, in *CompleteJobAssignmentRequest, opts ...grpc.CallOption) (*JobAssignment, error)
	CancelJobAssignment(ctx context.Context, in *CancelJobAssignmentRequest, opts ...grpc.CallOption) (*JobAssignment, error)
	// Job Progress
	UpdateJobProgress(ctx context.Context, in *UpdateJobProgressRequest, opts ...grpc.CallOption) (*JobProgress, error)
	GetJobProgress(ctx context.Context, in *GetJobProgressRequest, opts ...grpc.CallOption) (*JobProgress, error)
	// Activity Logs
	GetActivities(ctx context.Context, in *GetActivitiesRequest, opts ...grpc.CallOption) (*GetActivitiesResponse, error)
	// Realms
	GetRealms(ctx context.Context, in *GetRealmsRequest, opts ...grpc.CallOption) (*GetRealmsResponse, error)
	// Mana Management
	GetManaBalance(ctx context.Context, in *GetManaBalanceRequest, opts ...grpc.CallOption) (*GetManaBalanceResponse, error)
	UpdateManaBalance(ctx context.Context, in *UpdateManaBalanceRequest, opts ...grpc.CallOption) (*UpdateManaBalanceResponse, error)
	TransferMana(ctx context.Context, in *TransferManaRequest, opts ...grpc.CallOption) (*TransferManaResponse, error)
}

type wizardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWizardServiceClient(cc grpc.ClientConnInterface) WizardServiceClient {
	return &wizardServiceClient{cc}
}

func (c *wizardServiceClient) CreateWizard(ctx context.Context, in *CreateWizardRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_CreateWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetWizard(ctx context.Context, in *GetWizardRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_GetWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) UpdateWizard(ctx context.Context, in *UpdateWizardRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_UpdateWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) ListWizards(ctx context.Context, in *ListWizardsRequest, opts ...grpc.CallOption) (*ListWizardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWizardsResponse)
	err := c.cc.Invoke(ctx, WizardService_ListWizards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) DeleteWizard(ctx context.Context, in *DeleteWizardRequest, opts ...grpc.CallOption) (*DeleteWizardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWizardResponse)
	err := c.cc.Invoke(ctx, WizardService_DeleteWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) JoinGuild(ctx context.Context, in *JoinGuildRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_JoinGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) LeaveGuild(ctx context.Context, in *LeaveGuildRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_LeaveGuild_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, WizardService_CreateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, WizardService_GetJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) ListJobs(ctx context.Context, in *ListJobsRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, WizardService_ListJobs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Job)
	err := c.cc.Invoke(ctx, WizardService_UpdateJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) DeleteJob(ctx context.Context, in *DeleteJobRequest, opts ...grpc.CallOption) (*DeleteJobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteJobResponse)
	err := c.cc.Invoke(ctx, WizardService_DeleteJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) AssignWizardToJob(ctx context.Context, in *AssignWizardToJobRequest, opts ...grpc.CallOption) (*JobAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobAssignment)
	err := c.cc.Invoke(ctx, WizardService_AssignWizardToJob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetJobAssignments(ctx context.Context, in *GetJobAssignmentsRequest, opts ...grpc.CallOption) (*GetJobAssignmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobAssignmentsResponse)
	err := c.cc.Invoke(ctx, WizardService_GetJobAssignments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) CompleteJobAssignment(ctx context.Context, in *CompleteJobAssignmentRequest, opts ...grpc.CallOption) (*JobAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobAssignment)
	err := c.cc.Invoke(ctx, WizardService_CompleteJobAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) CancelJobAssignment(ctx context.Context, in *CancelJobAssignmentRequest, opts ...grpc.CallOption) (*JobAssignment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobAssignment)
	err := c.cc.Invoke(ctx, WizardService_CancelJobAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) UpdateJobProgress(ctx context.Context, in *UpdateJobProgressRequest, opts ...grpc.CallOption) (*JobProgress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobProgress)
	err := c.cc.Invoke(ctx, WizardService_UpdateJobProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetJobProgress(ctx context.Context, in *GetJobProgressRequest, opts ...grpc.CallOption) (*JobProgress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JobProgress)
	err := c.cc.Invoke(ctx, WizardService_GetJobProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetActivities(ctx context.Context, in *GetActivitiesRequest, opts ...grpc.CallOption) (*GetActivitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivitiesResponse)
	err := c.cc.Invoke(ctx, WizardService_GetActivities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetRealms(ctx context.Context, in *GetRealmsRequest, opts ...grpc.CallOption) (*GetRealmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRealmsResponse)
	err := c.cc.Invoke(ctx, WizardService_GetRealms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetManaBalance(ctx context.Context, in *GetManaBalanceRequest, opts ...grpc.CallOption) (*GetManaBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManaBalanceResponse)
	err := c.cc.Invoke(ctx, WizardService_GetManaBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) UpdateManaBalance(ctx context.Context, in *UpdateManaBalanceRequest, opts ...grpc.CallOption) (*UpdateManaBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateManaBalanceResponse)
	err := c.cc.Invoke(ctx, WizardService_UpdateManaBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) TransferMana(ctx context.Context, in *TransferManaRequest, opts ...grpc.CallOption) (*TransferManaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferManaResponse)
	err := c.cc.Invoke(ctx, WizardService_TransferMana_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WizardServiceServer is the server API for WizardService service.
// All implementations must embed UnimplementedWizardServiceServer
// for forward compatibility.
type WizardServiceServer interface {
	CreateWizard(context.Context, *CreateWizardRequest) (*Wizard, error)
	GetWizard(context.Context, *GetWizardRequest) (*Wizard, error)
	UpdateWizard(context.Context, *UpdateWizardRequest) (*Wizard, error)
	ListWizards(context.Context, *ListWizardsRequest) (*ListWizardsResponse, error)
	DeleteWizard(context.Context, *DeleteWizardRequest) (*DeleteWizardResponse, error)
	JoinGuild(context.Context, *JoinGuildRequest) (*Wizard, error)
	LeaveGuild(context.Context, *LeaveGuildRequest) (*Wizard, error)
	// Jobs
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*Job, error)
	DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error)
	// Job Assignments
	AssignWizardToJob(context.Context, *AssignWizardToJobRequest) (*JobAssignment, error)
	GetJobAssignments(context.Context, *GetJobAssignmentsRequest) (*GetJobAssignmentsResponse, error)
	CompleteJobAssignment(context.Context, *CompleteJobAssignmentRequest) (*JobAssignment, error)
	CancelJobAssignment(context.Context, *CancelJobAssignmentRequest) (*JobAssignment, error)
	// Job Progress
	UpdateJobProgress(context.Context, *UpdateJobProgressRequest) (*JobProgress, error)
	GetJobProgress(context.Context, *GetJobProgressRequest) (*JobProgress, error)
	// Activity Logs
	GetActivities(context.Context, *GetActivitiesRequest) (*GetActivitiesResponse, error)
	// Realms
	GetRealms(context.Context, *GetRealmsRequest) (*GetRealmsResponse, error)
	// Mana Management
	GetManaBalance(context.Context, *GetManaBalanceRequest) (*GetManaBalanceResponse, error)
	UpdateManaBalance(context.Context, *UpdateManaBalanceRequest) (*UpdateManaBalanceResponse, error)
	TransferMana(context.Context, *TransferManaRequest) (*TransferManaResponse, error)
	mustEmbedUnimplementedWizardServiceServer()
}

// UnimplementedWizardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWizardServiceServer struct{}

func (UnimplementedWizardServiceServer) CreateWizard(context.Context, *CreateWizardRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWizard not implemented")
}
func (UnimplementedWizardServiceServer) GetWizard(context.Context, *GetWizardRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWizard not implemented")
}
func (UnimplementedWizardServiceServer) UpdateWizard(context.Context, *UpdateWizardRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWizard not implemented")
}
func (UnimplementedWizardServiceServer) ListWizards(context.Context, *ListWizardsRequest) (*ListWizardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWizards not implemented")
}
func (UnimplementedWizardServiceServer) DeleteWizard(context.Context, *DeleteWizardRequest) (*DeleteWizardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWizard not implemented")
}
func (UnimplementedWizardServiceServer) JoinGuild(context.Context, *JoinGuildRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGuild not implemented")
}
func (UnimplementedWizardServiceServer) LeaveGuild(context.Context, *LeaveGuildRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveGuild not implemented")
}
func (UnimplementedWizardServiceServer) CreateJob(context.Context, *CreateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (UnimplementedWizardServiceServer) GetJob(context.Context, *GetJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedWizardServiceServer) ListJobs(context.Context, *ListJobsRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (UnimplementedWizardServiceServer) UpdateJob(context.Context, *UpdateJobRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (UnimplementedWizardServiceServer) DeleteJob(context.Context, *DeleteJobRequest) (*DeleteJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (UnimplementedWizardServiceServer) AssignWizardToJob(context.Context, *AssignWizardToJobRequest) (*JobAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignWizardToJob not implemented")
}
func (UnimplementedWizardServiceServer) GetJobAssignments(context.Context, *GetJobAssignmentsRequest) (*GetJobAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobAssignments not implemented")
}
func (UnimplementedWizardServiceServer) CompleteJobAssignment(context.Context, *CompleteJobAssignmentRequest) (*JobAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteJobAssignment not implemented")
}
func (UnimplementedWizardServiceServer) CancelJobAssignment(context.Context, *CancelJobAssignmentRequest) (*JobAssignment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJobAssignment not implemented")
}
func (UnimplementedWizardServiceServer) UpdateJobProgress(context.Context, *UpdateJobProgressRequest) (*JobProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobProgress not implemented")
}
func (UnimplementedWizardServiceServer) GetJobProgress(context.Context, *GetJobProgressRequest) (*JobProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobProgress not implemented")
}
func (UnimplementedWizardServiceServer) GetActivities(context.Context, *GetActivitiesRequest) (*GetActivitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivities not implemented")
}
func (UnimplementedWizardServiceServer) GetRealms(context.Context, *GetRealmsRequest) (*GetRealmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealms not implemented")
}
func (UnimplementedWizardServiceServer) GetManaBalance(context.Context, *GetManaBalanceRequest) (*GetManaBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManaBalance not implemented")
}
func (UnimplementedWizardServiceServer) UpdateManaBalance(context.Context, *UpdateManaBalanceRequest) (*UpdateManaBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManaBalance not implemented")
}
func (UnimplementedWizardServiceServer) TransferMana(context.Context, *TransferManaRequest) (*TransferManaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMana not implemented")
}
func (UnimplementedWizardServiceServer) mustEmbedUnimplementedWizardServiceServer() {}
func (UnimplementedWizardServiceServer) testEmbeddedByValue()                       {}

// UnsafeWizardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WizardServiceServer will
// result in compilation errors.
type UnsafeWizardServiceServer interface {
	mustEmbedUnimplementedWizardServiceServer()
}

func RegisterWizardServiceServer(s grpc.ServiceRegistrar, srv WizardServiceServer) {
	// If the following call pancis, it indicates UnimplementedWizardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WizardService_ServiceDesc, srv)
}

func _WizardService_CreateWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).CreateWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_CreateWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).CreateWizard(ctx, req.(*CreateWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetWizard(ctx, req.(*GetWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_UpdateWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).UpdateWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_UpdateWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).UpdateWizard(ctx, req.(*UpdateWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_ListWizards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWizardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).ListWizards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_ListWizards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).ListWizards(ctx, req.(*ListWizardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_DeleteWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).DeleteWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_DeleteWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).DeleteWizard(ctx, req.(*DeleteWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_JoinGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).JoinGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_JoinGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).JoinGuild(ctx, req.(*JoinGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_LeaveGuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveGuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).LeaveGuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_LeaveGuild_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).LeaveGuild(ctx, req.(*LeaveGuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_CreateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_ListJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).ListJobs(ctx, req.(*ListJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_UpdateJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_DeleteJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).DeleteJob(ctx, req.(*DeleteJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_AssignWizardToJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignWizardToJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).AssignWizardToJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_AssignWizardToJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).AssignWizardToJob(ctx, req.(*AssignWizardToJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetJobAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetJobAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetJobAssignments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetJobAssignments(ctx, req.(*GetJobAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_CompleteJobAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteJobAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).CompleteJobAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_CompleteJobAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).CompleteJobAssignment(ctx, req.(*CompleteJobAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_CancelJobAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).CancelJobAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_CancelJobAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).CancelJobAssignment(ctx, req.(*CancelJobAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_UpdateJobProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).UpdateJobProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_UpdateJobProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).UpdateJobProgress(ctx, req.(*UpdateJobProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetJobProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetJobProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetJobProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetJobProgress(ctx, req.(*GetJobProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetActivities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetActivities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetActivities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetActivities(ctx, req.(*GetActivitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetRealms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetRealms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetRealms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetRealms(ctx, req.(*GetRealmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetManaBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManaBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetManaBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetManaBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetManaBalance(ctx, req.(*GetManaBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_UpdateManaBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManaBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).UpdateManaBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_UpdateManaBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).UpdateManaBalance(ctx, req.(*UpdateManaBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_TransferMana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferManaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).TransferMana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_TransferMana_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).TransferMana(ctx, req.(*TransferManaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WizardService_ServiceDesc is the grpc.ServiceDesc for WizardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WizardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wizard.WizardService",
	HandlerType: (*WizardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWizard",
			Handler:    _WizardService_CreateWizard_Handler,
		},
		{
			MethodName: "GetWizard",
			Handler:    _WizardService_GetWizard_Handler,
		},
		{
			MethodName: "UpdateWizard",
			Handler:    _WizardService_UpdateWizard_Handler,
		},
		{
			MethodName: "ListWizards",
			Handler:    _WizardService_ListWizards_Handler,
		},
		{
			MethodName: "DeleteWizard",
			Handler:    _WizardService_DeleteWizard_Handler,
		},
		{
			MethodName: "JoinGuild",
			Handler:    _WizardService_JoinGuild_Handler,
		},
		{
			MethodName: "LeaveGuild",
			Handler:    _WizardService_LeaveGuild_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _WizardService_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _WizardService_GetJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _WizardService_ListJobs_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _WizardService_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _WizardService_DeleteJob_Handler,
		},
		{
			MethodName: "AssignWizardToJob",
			Handler:    _WizardService_AssignWizardToJob_Handler,
		},
		{
			MethodName: "GetJobAssignments",
			Handler:    _WizardService_GetJobAssignments_Handler,
		},
		{
			MethodName: "CompleteJobAssignment",
			Handler:    _WizardService_CompleteJobAssignment_Handler,
		},
		{
			MethodName: "CancelJobAssignment",
			Handler:    _WizardService_CancelJobAssignment_Handler,
		},
		{
			MethodName: "UpdateJobProgress",
			Handler:    _WizardService_UpdateJobProgress_Handler,
		},
		{
			MethodName: "GetJobProgress",
			Handler:    _WizardService_GetJobProgress_Handler,
		},
		{
			MethodName: "GetActivities",
			Handler:    _WizardService_GetActivities_Handler,
		},
		{
			MethodName: "GetRealms",
			Handler:    _WizardService_GetRealms_Handler,
		},
		{
			MethodName: "GetManaBalance",
			Handler:    _WizardService_GetManaBalance_Handler,
		},
		{
			MethodName: "UpdateManaBalance",
			Handler:    _WizardService_UpdateManaBalance_Handler,
		},
		{
			MethodName: "TransferMana",
			Handler:    _WizardService_TransferMana_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wizard/wizard.proto",
}
