// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/mana/mana.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ManaService_TransferMana_FullMethodName       = "/mana.ManaService/TransferMana"
	ManaService_GetManaBalance_FullMethodName     = "/mana.ManaService/GetManaBalance"
	ManaService_ListTransactions_FullMethodName   = "/mana.ManaService/ListTransactions"
	ManaService_CreateInvestment_FullMethodName   = "/mana.ManaService/CreateInvestment"
	ManaService_GetInvestments_FullMethodName     = "/mana.ManaService/GetInvestments"
	ManaService_GetInvestmentTypes_FullMethodName = "/mana.ManaService/GetInvestmentTypes"
)

// ManaServiceClient is the client API for ManaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManaServiceClient interface {
	TransferMana(ctx context.Context, in *TransferManaRequest, opts ...grpc.CallOption) (*TransferManaResponse, error)
	GetManaBalance(ctx context.Context, in *GetManaBalanceRequest, opts ...grpc.CallOption) (*GetManaBalanceResponse, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	CreateInvestment(ctx context.Context, in *CreateInvestmentRequest, opts ...grpc.CallOption) (*CreateInvestmentResponse, error)
	GetInvestments(ctx context.Context, in *GetInvestmentsRequest, opts ...grpc.CallOption) (*GetInvestmentsResponse, error)
	GetInvestmentTypes(ctx context.Context, in *GetInvestmentTypesRequest, opts ...grpc.CallOption) (*GetInvestmentTypesResponse, error)
}

type manaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManaServiceClient(cc grpc.ClientConnInterface) ManaServiceClient {
	return &manaServiceClient{cc}
}

func (c *manaServiceClient) TransferMana(ctx context.Context, in *TransferManaRequest, opts ...grpc.CallOption) (*TransferManaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferManaResponse)
	err := c.cc.Invoke(ctx, ManaService_TransferMana_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manaServiceClient) GetManaBalance(ctx context.Context, in *GetManaBalanceRequest, opts ...grpc.CallOption) (*GetManaBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManaBalanceResponse)
	err := c.cc.Invoke(ctx, ManaService_GetManaBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manaServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, ManaService_ListTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manaServiceClient) CreateInvestment(ctx context.Context, in *CreateInvestmentRequest, opts ...grpc.CallOption) (*CreateInvestmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateInvestmentResponse)
	err := c.cc.Invoke(ctx, ManaService_CreateInvestment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manaServiceClient) GetInvestments(ctx context.Context, in *GetInvestmentsRequest, opts ...grpc.CallOption) (*GetInvestmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvestmentsResponse)
	err := c.cc.Invoke(ctx, ManaService_GetInvestments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manaServiceClient) GetInvestmentTypes(ctx context.Context, in *GetInvestmentTypesRequest, opts ...grpc.CallOption) (*GetInvestmentTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvestmentTypesResponse)
	err := c.cc.Invoke(ctx, ManaService_GetInvestmentTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManaServiceServer is the server API for ManaService service.
// All implementations must embed UnimplementedManaServiceServer
// for forward compatibility.
type ManaServiceServer interface {
	TransferMana(context.Context, *TransferManaRequest) (*TransferManaResponse, error)
	GetManaBalance(context.Context, *GetManaBalanceRequest) (*GetManaBalanceResponse, error)
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	CreateInvestment(context.Context, *CreateInvestmentRequest) (*CreateInvestmentResponse, error)
	GetInvestments(context.Context, *GetInvestmentsRequest) (*GetInvestmentsResponse, error)
	GetInvestmentTypes(context.Context, *GetInvestmentTypesRequest) (*GetInvestmentTypesResponse, error)
	mustEmbedUnimplementedManaServiceServer()
}

// UnimplementedManaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManaServiceServer struct{}

func (UnimplementedManaServiceServer) TransferMana(context.Context, *TransferManaRequest) (*TransferManaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMana not implemented")
}
func (UnimplementedManaServiceServer) GetManaBalance(context.Context, *GetManaBalanceRequest) (*GetManaBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManaBalance not implemented")
}
func (UnimplementedManaServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedManaServiceServer) CreateInvestment(context.Context, *CreateInvestmentRequest) (*CreateInvestmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvestment not implemented")
}
func (UnimplementedManaServiceServer) GetInvestments(context.Context, *GetInvestmentsRequest) (*GetInvestmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestments not implemented")
}
func (UnimplementedManaServiceServer) GetInvestmentTypes(context.Context, *GetInvestmentTypesRequest) (*GetInvestmentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvestmentTypes not implemented")
}
func (UnimplementedManaServiceServer) mustEmbedUnimplementedManaServiceServer() {}
func (UnimplementedManaServiceServer) testEmbeddedByValue()                     {}

// UnsafeManaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManaServiceServer will
// result in compilation errors.
type UnsafeManaServiceServer interface {
	mustEmbedUnimplementedManaServiceServer()
}

func RegisterManaServiceServer(s grpc.ServiceRegistrar, srv ManaServiceServer) {
	// If the following call pancis, it indicates UnimplementedManaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ManaService_ServiceDesc, srv)
}

func _ManaService_TransferMana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferManaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManaServiceServer).TransferMana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManaService_TransferMana_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManaServiceServer).TransferMana(ctx, req.(*TransferManaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManaService_GetManaBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManaBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManaServiceServer).GetManaBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManaService_GetManaBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManaServiceServer).GetManaBalance(ctx, req.(*GetManaBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManaService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManaServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManaService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManaServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManaService_CreateInvestment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvestmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManaServiceServer).CreateInvestment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManaService_CreateInvestment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManaServiceServer).CreateInvestment(ctx, req.(*CreateInvestmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManaService_GetInvestments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManaServiceServer).GetInvestments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManaService_GetInvestments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManaServiceServer).GetInvestments(ctx, req.(*GetInvestmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManaService_GetInvestmentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvestmentTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManaServiceServer).GetInvestmentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ManaService_GetInvestmentTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManaServiceServer).GetInvestmentTypes(ctx, req.(*GetInvestmentTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManaService_ServiceDesc is the grpc.ServiceDesc for ManaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mana.ManaService",
	HandlerType: (*ManaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferMana",
			Handler:    _ManaService_TransferMana_Handler,
		},
		{
			MethodName: "GetManaBalance",
			Handler:    _ManaService_GetManaBalance_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _ManaService_ListTransactions_Handler,
		},
		{
			MethodName: "CreateInvestment",
			Handler:    _ManaService_CreateInvestment_Handler,
		},
		{
			MethodName: "GetInvestments",
			Handler:    _ManaService_GetInvestments_Handler,
		},
		{
			MethodName: "GetInvestmentTypes",
			Handler:    _ManaService_GetInvestmentTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/mana/mana.proto",
}
