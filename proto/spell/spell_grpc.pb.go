// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/spell/spell.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpellService_CreateSpell_FullMethodName = "/spell.SpellService/CreateSpell"
	SpellService_GetSpell_FullMethodName    = "/spell.SpellService/GetSpell"
	SpellService_ListSpells_FullMethodName  = "/spell.SpellService/ListSpells"
	SpellService_LearnSpell_FullMethodName  = "/spell.SpellService/LearnSpell"
	SpellService_CastSpell_FullMethodName   = "/spell.SpellService/CastSpell"
)

// SpellServiceClient is the client API for SpellService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpellServiceClient interface {
	CreateSpell(ctx context.Context, in *CreateSpellRequest, opts ...grpc.CallOption) (*Spell, error)
	GetSpell(ctx context.Context, in *GetSpellRequest, opts ...grpc.CallOption) (*Spell, error)
	ListSpells(ctx context.Context, in *ListSpellsRequest, opts ...grpc.CallOption) (*ListSpellsResponse, error)
	LearnSpell(ctx context.Context, in *LearnSpellRequest, opts ...grpc.CallOption) (*LearnSpellResponse, error)
	CastSpell(ctx context.Context, in *CastSpellRequest, opts ...grpc.CallOption) (*CastSpellResponse, error)
}

type spellServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpellServiceClient(cc grpc.ClientConnInterface) SpellServiceClient {
	return &spellServiceClient{cc}
}

func (c *spellServiceClient) CreateSpell(ctx context.Context, in *CreateSpellRequest, opts ...grpc.CallOption) (*Spell, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Spell)
	err := c.cc.Invoke(ctx, SpellService_CreateSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) GetSpell(ctx context.Context, in *GetSpellRequest, opts ...grpc.CallOption) (*Spell, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Spell)
	err := c.cc.Invoke(ctx, SpellService_GetSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) ListSpells(ctx context.Context, in *ListSpellsRequest, opts ...grpc.CallOption) (*ListSpellsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpellsResponse)
	err := c.cc.Invoke(ctx, SpellService_ListSpells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) LearnSpell(ctx context.Context, in *LearnSpellRequest, opts ...grpc.CallOption) (*LearnSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearnSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_LearnSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spellServiceClient) CastSpell(ctx context.Context, in *CastSpellRequest, opts ...grpc.CallOption) (*CastSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CastSpellResponse)
	err := c.cc.Invoke(ctx, SpellService_CastSpell_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpellServiceServer is the server API for SpellService service.
// All implementations must embed UnimplementedSpellServiceServer
// for forward compatibility.
type SpellServiceServer interface {
	CreateSpell(context.Context, *CreateSpellRequest) (*Spell, error)
	GetSpell(context.Context, *GetSpellRequest) (*Spell, error)
	ListSpells(context.Context, *ListSpellsRequest) (*ListSpellsResponse, error)
	LearnSpell(context.Context, *LearnSpellRequest) (*LearnSpellResponse, error)
	CastSpell(context.Context, *CastSpellRequest) (*CastSpellResponse, error)
	mustEmbedUnimplementedSpellServiceServer()
}

// UnimplementedSpellServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpellServiceServer struct{}

func (UnimplementedSpellServiceServer) CreateSpell(context.Context, *CreateSpellRequest) (*Spell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpell not implemented")
}
func (UnimplementedSpellServiceServer) GetSpell(context.Context, *GetSpellRequest) (*Spell, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpell not implemented")
}
func (UnimplementedSpellServiceServer) ListSpells(context.Context, *ListSpellsRequest) (*ListSpellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpells not implemented")
}
func (UnimplementedSpellServiceServer) LearnSpell(context.Context, *LearnSpellRequest) (*LearnSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LearnSpell not implemented")
}
func (UnimplementedSpellServiceServer) CastSpell(context.Context, *CastSpellRequest) (*CastSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CastSpell not implemented")
}
func (UnimplementedSpellServiceServer) mustEmbedUnimplementedSpellServiceServer() {}
func (UnimplementedSpellServiceServer) testEmbeddedByValue()                      {}

// UnsafeSpellServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpellServiceServer will
// result in compilation errors.
type UnsafeSpellServiceServer interface {
	mustEmbedUnimplementedSpellServiceServer()
}

func RegisterSpellServiceServer(s grpc.ServiceRegistrar, srv SpellServiceServer) {
	// If the following call pancis, it indicates UnimplementedSpellServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpellService_ServiceDesc, srv)
}

func _SpellService_CreateSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).CreateSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_CreateSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).CreateSpell(ctx, req.(*CreateSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_GetSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).GetSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_GetSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).GetSpell(ctx, req.(*GetSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_ListSpells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).ListSpells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_ListSpells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).ListSpells(ctx, req.(*ListSpellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_LearnSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearnSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).LearnSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_LearnSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).LearnSpell(ctx, req.(*LearnSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpellService_CastSpell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpellServiceServer).CastSpell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpellService_CastSpell_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpellServiceServer).CastSpell(ctx, req.(*CastSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpellService_ServiceDesc is the grpc.ServiceDesc for SpellService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpellService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spell.SpellService",
	HandlerType: (*SpellServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpell",
			Handler:    _SpellService_CreateSpell_Handler,
		},
		{
			MethodName: "GetSpell",
			Handler:    _SpellService_GetSpell_Handler,
		},
		{
			MethodName: "ListSpells",
			Handler:    _SpellService_ListSpells_Handler,
		},
		{
			MethodName: "LearnSpell",
			Handler:    _SpellService_LearnSpell_Handler,
		},
		{
			MethodName: "CastSpell",
			Handler:    _SpellService_CastSpell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/spell/spell.proto",
}
