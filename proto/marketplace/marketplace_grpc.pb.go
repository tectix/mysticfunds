// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/marketplace/marketplace.proto

package marketplace

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MarketplaceService_GetArtifacts_FullMethodName               = "/marketplace.MarketplaceService/GetArtifacts"
	MarketplaceService_GetArtifactsByRealm_FullMethodName        = "/marketplace.MarketplaceService/GetArtifactsByRealm"
	MarketplaceService_PurchaseArtifact_FullMethodName           = "/marketplace.MarketplaceService/PurchaseArtifact"
	MarketplaceService_GetWizardArtifacts_FullMethodName         = "/marketplace.MarketplaceService/GetWizardArtifacts"
	MarketplaceService_EquipArtifact_FullMethodName              = "/marketplace.MarketplaceService/EquipArtifact"
	MarketplaceService_GetScrolls_FullMethodName                 = "/marketplace.MarketplaceService/GetScrolls"
	MarketplaceService_PurchaseScroll_FullMethodName             = "/marketplace.MarketplaceService/PurchaseScroll"
	MarketplaceService_GetWizardScrolls_FullMethodName           = "/marketplace.MarketplaceService/GetWizardScrolls"
	MarketplaceService_GetSpells_FullMethodName                  = "/marketplace.MarketplaceService/GetSpells"
	MarketplaceService_GetAvailableTeachers_FullMethodName       = "/marketplace.MarketplaceService/GetAvailableTeachers"
	MarketplaceService_LearnSpellFromWizard_FullMethodName       = "/marketplace.MarketplaceService/LearnSpellFromWizard"
	MarketplaceService_OfferSpellTeaching_FullMethodName         = "/marketplace.MarketplaceService/OfferSpellTeaching"
	MarketplaceService_GetWizardSpells_FullMethodName            = "/marketplace.MarketplaceService/GetWizardSpells"
	MarketplaceService_GetMarketplaceTransactions_FullMethodName = "/marketplace.MarketplaceService/GetMarketplaceTransactions"
)

// MarketplaceServiceClient is the client API for MarketplaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceServiceClient interface {
	// Artifact operations
	GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error)
	GetArtifactsByRealm(ctx context.Context, in *GetArtifactsByRealmRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error)
	PurchaseArtifact(ctx context.Context, in *PurchaseArtifactRequest, opts ...grpc.CallOption) (*PurchaseResponse, error)
	GetWizardArtifacts(ctx context.Context, in *GetWizardArtifactsRequest, opts ...grpc.CallOption) (*GetWizardArtifactsResponse, error)
	EquipArtifact(ctx context.Context, in *EquipArtifactRequest, opts ...grpc.CallOption) (*EquipArtifactResponse, error)
	// Scroll operations
	GetScrolls(ctx context.Context, in *GetScrollsRequest, opts ...grpc.CallOption) (*GetScrollsResponse, error)
	PurchaseScroll(ctx context.Context, in *PurchaseScrollRequest, opts ...grpc.CallOption) (*PurchaseResponse, error)
	GetWizardScrolls(ctx context.Context, in *GetWizardScrollsRequest, opts ...grpc.CallOption) (*GetWizardScrollsResponse, error)
	// Spell operations
	GetSpells(ctx context.Context, in *GetSpellsRequest, opts ...grpc.CallOption) (*GetSpellsResponse, error)
	GetAvailableTeachers(ctx context.Context, in *GetAvailableTeachersRequest, opts ...grpc.CallOption) (*GetAvailableTeachersResponse, error)
	LearnSpellFromWizard(ctx context.Context, in *LearnSpellRequest, opts ...grpc.CallOption) (*LearnSpellResponse, error)
	OfferSpellTeaching(ctx context.Context, in *OfferSpellTeachingRequest, opts ...grpc.CallOption) (*OfferSpellTeachingResponse, error)
	GetWizardSpells(ctx context.Context, in *GetWizardSpellsRequest, opts ...grpc.CallOption) (*GetWizardSpellsResponse, error)
	// Transaction history
	GetMarketplaceTransactions(ctx context.Context, in *GetMarketplaceTransactionsRequest, opts ...grpc.CallOption) (*GetMarketplaceTransactionsResponse, error)
}

type marketplaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceServiceClient(cc grpc.ClientConnInterface) MarketplaceServiceClient {
	return &marketplaceServiceClient{cc}
}

func (c *marketplaceServiceClient) GetArtifacts(ctx context.Context, in *GetArtifactsRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArtifactsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetArtifacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetArtifactsByRealm(ctx context.Context, in *GetArtifactsByRealmRequest, opts ...grpc.CallOption) (*GetArtifactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetArtifactsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetArtifactsByRealm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) PurchaseArtifact(ctx context.Context, in *PurchaseArtifactRequest, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_PurchaseArtifact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetWizardArtifacts(ctx context.Context, in *GetWizardArtifactsRequest, opts ...grpc.CallOption) (*GetWizardArtifactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWizardArtifactsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetWizardArtifacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) EquipArtifact(ctx context.Context, in *EquipArtifactRequest, opts ...grpc.CallOption) (*EquipArtifactResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipArtifactResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_EquipArtifact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetScrolls(ctx context.Context, in *GetScrollsRequest, opts ...grpc.CallOption) (*GetScrollsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScrollsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetScrolls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) PurchaseScroll(ctx context.Context, in *PurchaseScrollRequest, opts ...grpc.CallOption) (*PurchaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_PurchaseScroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetWizardScrolls(ctx context.Context, in *GetWizardScrollsRequest, opts ...grpc.CallOption) (*GetWizardScrollsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWizardScrollsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetWizardScrolls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetSpells(ctx context.Context, in *GetSpellsRequest, opts ...grpc.CallOption) (*GetSpellsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSpellsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetSpells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetAvailableTeachers(ctx context.Context, in *GetAvailableTeachersRequest, opts ...grpc.CallOption) (*GetAvailableTeachersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailableTeachersResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetAvailableTeachers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) LearnSpellFromWizard(ctx context.Context, in *LearnSpellRequest, opts ...grpc.CallOption) (*LearnSpellResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearnSpellResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_LearnSpellFromWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) OfferSpellTeaching(ctx context.Context, in *OfferSpellTeachingRequest, opts ...grpc.CallOption) (*OfferSpellTeachingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OfferSpellTeachingResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_OfferSpellTeaching_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetWizardSpells(ctx context.Context, in *GetWizardSpellsRequest, opts ...grpc.CallOption) (*GetWizardSpellsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWizardSpellsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetWizardSpells_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketplaceServiceClient) GetMarketplaceTransactions(ctx context.Context, in *GetMarketplaceTransactionsRequest, opts ...grpc.CallOption) (*GetMarketplaceTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarketplaceTransactionsResponse)
	err := c.cc.Invoke(ctx, MarketplaceService_GetMarketplaceTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketplaceServiceServer is the server API for MarketplaceService service.
// All implementations must embed UnimplementedMarketplaceServiceServer
// for forward compatibility.
type MarketplaceServiceServer interface {
	// Artifact operations
	GetArtifacts(context.Context, *GetArtifactsRequest) (*GetArtifactsResponse, error)
	GetArtifactsByRealm(context.Context, *GetArtifactsByRealmRequest) (*GetArtifactsResponse, error)
	PurchaseArtifact(context.Context, *PurchaseArtifactRequest) (*PurchaseResponse, error)
	GetWizardArtifacts(context.Context, *GetWizardArtifactsRequest) (*GetWizardArtifactsResponse, error)
	EquipArtifact(context.Context, *EquipArtifactRequest) (*EquipArtifactResponse, error)
	// Scroll operations
	GetScrolls(context.Context, *GetScrollsRequest) (*GetScrollsResponse, error)
	PurchaseScroll(context.Context, *PurchaseScrollRequest) (*PurchaseResponse, error)
	GetWizardScrolls(context.Context, *GetWizardScrollsRequest) (*GetWizardScrollsResponse, error)
	// Spell operations
	GetSpells(context.Context, *GetSpellsRequest) (*GetSpellsResponse, error)
	GetAvailableTeachers(context.Context, *GetAvailableTeachersRequest) (*GetAvailableTeachersResponse, error)
	LearnSpellFromWizard(context.Context, *LearnSpellRequest) (*LearnSpellResponse, error)
	OfferSpellTeaching(context.Context, *OfferSpellTeachingRequest) (*OfferSpellTeachingResponse, error)
	GetWizardSpells(context.Context, *GetWizardSpellsRequest) (*GetWizardSpellsResponse, error)
	// Transaction history
	GetMarketplaceTransactions(context.Context, *GetMarketplaceTransactionsRequest) (*GetMarketplaceTransactionsResponse, error)
	mustEmbedUnimplementedMarketplaceServiceServer()
}

// UnimplementedMarketplaceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMarketplaceServiceServer struct{}

func (UnimplementedMarketplaceServiceServer) GetArtifacts(context.Context, *GetArtifactsRequest) (*GetArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifacts not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetArtifactsByRealm(context.Context, *GetArtifactsByRealmRequest) (*GetArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactsByRealm not implemented")
}
func (UnimplementedMarketplaceServiceServer) PurchaseArtifact(context.Context, *PurchaseArtifactRequest) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseArtifact not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetWizardArtifacts(context.Context, *GetWizardArtifactsRequest) (*GetWizardArtifactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWizardArtifacts not implemented")
}
func (UnimplementedMarketplaceServiceServer) EquipArtifact(context.Context, *EquipArtifactRequest) (*EquipArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipArtifact not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetScrolls(context.Context, *GetScrollsRequest) (*GetScrollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScrolls not implemented")
}
func (UnimplementedMarketplaceServiceServer) PurchaseScroll(context.Context, *PurchaseScrollRequest) (*PurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseScroll not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetWizardScrolls(context.Context, *GetWizardScrollsRequest) (*GetWizardScrollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWizardScrolls not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetSpells(context.Context, *GetSpellsRequest) (*GetSpellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpells not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetAvailableTeachers(context.Context, *GetAvailableTeachersRequest) (*GetAvailableTeachersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableTeachers not implemented")
}
func (UnimplementedMarketplaceServiceServer) LearnSpellFromWizard(context.Context, *LearnSpellRequest) (*LearnSpellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LearnSpellFromWizard not implemented")
}
func (UnimplementedMarketplaceServiceServer) OfferSpellTeaching(context.Context, *OfferSpellTeachingRequest) (*OfferSpellTeachingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfferSpellTeaching not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetWizardSpells(context.Context, *GetWizardSpellsRequest) (*GetWizardSpellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWizardSpells not implemented")
}
func (UnimplementedMarketplaceServiceServer) GetMarketplaceTransactions(context.Context, *GetMarketplaceTransactionsRequest) (*GetMarketplaceTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketplaceTransactions not implemented")
}
func (UnimplementedMarketplaceServiceServer) mustEmbedUnimplementedMarketplaceServiceServer() {}
func (UnimplementedMarketplaceServiceServer) testEmbeddedByValue()                            {}

// UnsafeMarketplaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceServiceServer will
// result in compilation errors.
type UnsafeMarketplaceServiceServer interface {
	mustEmbedUnimplementedMarketplaceServiceServer()
}

func RegisterMarketplaceServiceServer(s grpc.ServiceRegistrar, srv MarketplaceServiceServer) {
	// If the following call pancis, it indicates UnimplementedMarketplaceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MarketplaceService_ServiceDesc, srv)
}

func _MarketplaceService_GetArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetArtifacts(ctx, req.(*GetArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetArtifactsByRealm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtifactsByRealmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetArtifactsByRealm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetArtifactsByRealm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetArtifactsByRealm(ctx, req.(*GetArtifactsByRealmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_PurchaseArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).PurchaseArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_PurchaseArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).PurchaseArtifact(ctx, req.(*PurchaseArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetWizardArtifacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWizardArtifactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetWizardArtifacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetWizardArtifacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetWizardArtifacts(ctx, req.(*GetWizardArtifactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_EquipArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).EquipArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_EquipArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).EquipArtifact(ctx, req.(*EquipArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetScrolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScrollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetScrolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetScrolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetScrolls(ctx, req.(*GetScrollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_PurchaseScroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseScrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).PurchaseScroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_PurchaseScroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).PurchaseScroll(ctx, req.(*PurchaseScrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetWizardScrolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWizardScrollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetWizardScrolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetWizardScrolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetWizardScrolls(ctx, req.(*GetWizardScrollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetSpells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetSpells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetSpells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetSpells(ctx, req.(*GetSpellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetAvailableTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableTeachersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetAvailableTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetAvailableTeachers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetAvailableTeachers(ctx, req.(*GetAvailableTeachersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_LearnSpellFromWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearnSpellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).LearnSpellFromWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_LearnSpellFromWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).LearnSpellFromWizard(ctx, req.(*LearnSpellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_OfferSpellTeaching_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferSpellTeachingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).OfferSpellTeaching(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_OfferSpellTeaching_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).OfferSpellTeaching(ctx, req.(*OfferSpellTeachingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetWizardSpells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWizardSpellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetWizardSpells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetWizardSpells_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetWizardSpells(ctx, req.(*GetWizardSpellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketplaceService_GetMarketplaceTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketplaceTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketplaceServiceServer).GetMarketplaceTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MarketplaceService_GetMarketplaceTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketplaceServiceServer).GetMarketplaceTransactions(ctx, req.(*GetMarketplaceTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketplaceService_ServiceDesc is the grpc.ServiceDesc for MarketplaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketplaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketplace.MarketplaceService",
	HandlerType: (*MarketplaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtifacts",
			Handler:    _MarketplaceService_GetArtifacts_Handler,
		},
		{
			MethodName: "GetArtifactsByRealm",
			Handler:    _MarketplaceService_GetArtifactsByRealm_Handler,
		},
		{
			MethodName: "PurchaseArtifact",
			Handler:    _MarketplaceService_PurchaseArtifact_Handler,
		},
		{
			MethodName: "GetWizardArtifacts",
			Handler:    _MarketplaceService_GetWizardArtifacts_Handler,
		},
		{
			MethodName: "EquipArtifact",
			Handler:    _MarketplaceService_EquipArtifact_Handler,
		},
		{
			MethodName: "GetScrolls",
			Handler:    _MarketplaceService_GetScrolls_Handler,
		},
		{
			MethodName: "PurchaseScroll",
			Handler:    _MarketplaceService_PurchaseScroll_Handler,
		},
		{
			MethodName: "GetWizardScrolls",
			Handler:    _MarketplaceService_GetWizardScrolls_Handler,
		},
		{
			MethodName: "GetSpells",
			Handler:    _MarketplaceService_GetSpells_Handler,
		},
		{
			MethodName: "GetAvailableTeachers",
			Handler:    _MarketplaceService_GetAvailableTeachers_Handler,
		},
		{
			MethodName: "LearnSpellFromWizard",
			Handler:    _MarketplaceService_LearnSpellFromWizard_Handler,
		},
		{
			MethodName: "OfferSpellTeaching",
			Handler:    _MarketplaceService_OfferSpellTeaching_Handler,
		},
		{
			MethodName: "GetWizardSpells",
			Handler:    _MarketplaceService_GetWizardSpells_Handler,
		},
		{
			MethodName: "GetMarketplaceTransactions",
			Handler:    _MarketplaceService_GetMarketplaceTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/marketplace/marketplace.proto",
}
