# Multi-stage build for Railway deployment
FROM golang:1.21-alpine AS builder

# Install necessary packages
RUN apk add --no-cache git make postgresql-client

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build all services
RUN make build

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS and postgresql-client for migrations
RUN apk --no-cache add ca-certificates postgresql-client curl

WORKDIR /root/

# Copy binaries from builder
COPY --from=builder /app/cmd/auth-service/bin/auth ./bin/
COPY --from=builder /app/cmd/wizard-service/bin/wizard ./bin/
COPY --from=builder /app/cmd/mana-service/bin/mana ./bin/
COPY --from=builder /app/cmd/api-gateway/bin/api-gateway ./bin/

# Copy migrations
COPY --from=builder /app/migrations ./migrations/

# Copy config files
COPY --from=builder /app/cmd/auth-service/config.yaml ./config/auth-config.yaml
COPY --from=builder /app/cmd/wizard-service/config.yaml ./config/wizard-config.yaml
COPY --from=builder /app/cmd/mana-service/config.yaml ./config/mana-config.yaml

# Copy web files
COPY --from=builder /app/web ./web/

# Copy startup script
COPY railway-start.sh ./
RUN chmod +x railway-start.sh

# Expose API Gateway port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Start all services
CMD ["./railway-start.sh"]